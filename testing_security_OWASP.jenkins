pipeline {
    agent any
    environment {
        SERVER_URL = 'chilla.pp.ua'
    }
    stages {
        stage('Check nmap') {
            steps {
                script {
                    if (sh(script: 'command -v nmap', returnStatus: true) != 0) {
                        error 'nmap is not installed.'
                    }
                }
            }
        }
        stage('Run nmap scan') {
            steps {
                echo "**************** Running nmap scan ***************************"
                sh "nmap -sV $SERVER_URL -oN nmap_results.txt"
                echo "**************** nmap scan completed ***************************"
            }
        }
        stage('Check Nikto') {
            steps {
                script {
                    if (sh(script: 'command -v nikto', returnStatus: true) != 0) {
                        error 'Nikto is not installed.'
                    }
                }
            }
        }
        stage('Run Nikto scan') {
            steps {
                echo "**************** Running Nikto scan ***************************"
                sh "nikto -h $SERVER_URL -o nikto_results.txt"
                echo "**************** Nikto scan completed ***************************"
            }
        }
        stage('Check OWASP ZAP') {
            steps {
                script {
                    if (sh(script: 'command -v zap-cli', returnStatus: true) != 0) {
                        error 'OWASP ZAP (zap-cli) is not installed.'
                    }
                }
            }
        }
        stage('Run OWASP ZAP scan') {
            steps {
                echo "**************** Running OWASP ZAP scan ***************************"
                sh "zap-cli quick-scan --self-contained $SERVER_URL > zap_results.txt"
                echo "**************** OWASP ZAP scan completed ***************************"
            }
        }
        stage('Check Burp Suite') {
            steps {
                script {
                    if (sh(script: 'command -v burp', returnStatus: true) != 0) {
                        error 'Burp Suite is not installed.'
                    }
                }
            }
        }
        stage('Run Burp Suite scan') {
            steps {
                echo "**************** Running Burp Suite scan ***************************"
                sh "burp -aC -n -c burp_scan.json -u $SERVER_URL"
                echo "**************** Burp Suite scan completed ***************************"
            }
        }
        stage('Archive scan results') {
            steps {
                echo "**************** Archiving scan results ***************************"
                archiveArtifacts artifacts: '*.txt, *.json', allowEmptyArchive: true
                echo "**************** Scan results archived ***************************"
            }
        }
    }
}
